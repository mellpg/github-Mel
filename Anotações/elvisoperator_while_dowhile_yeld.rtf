{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset1 Segoe UI Symbol;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil\fcharset1 Segoe UI Emoji;}{\f5\fnil\fcharset1 Cambria Math;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont5\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang22 explique o que \'e9 yeld em java e exemplo no switch case\par
Em Java, yield \'e9 uma palavra-chave que foi introduzida no Java 14 como parte dos switch expressions (n\'e3o confundir com o Thread.yield() que existe desde antes).\par
\par
O yield serve para retornar um valor de dentro de um switch usado como express\'e3o \f1\emdash  ou seja, quando o switch est\f0\'e1 sendo usado para produzir um valor e n\'e3o apenas executar blocos de c\'f3digo.\par
\par
\f2\u-10179?\u-9012?\f1  \f0 Diferen\'e7a para return\par
return sai de um m\'e9todo inteiro.\par
\par
yield sai apenas do case dentro do switch expression, devolvendo o valor para a express\'e3o.\par
\par
\f2\u-10179?\u-9012?\f1  \f0 Exemplo usando yield no switch:\par
public class ExemploYield \{\par
    public static void main(String[] args) \{\par
        String dia = "S\'c1BADO";\par
\par
        // Switch usado como express\'e3o\par
        int numeroDia = switch (dia) \{\par
            case "SEGUNDA" -> 1;\par
            case "TER\'c7A"   -> 2;\par
            case "QUARTA"  -> 3;\par
            case "QUINTA"  -> 4;\par
            case "SEXTA"   -> 5;\par
            case "S\'c1BADO", "DOMINGO" -> \{\par
                System.out.println("Final de semana!");\par
                yield 6; // Retorna o valor para numeroDia\par
            \}\par
            default -> \{\par
                System.out.println("Dia inv\'e1lido!");\par
                yield -1;\par
            \}\par
        \};\par
\par
        System.out.println("N\'famero do dia: " + numeroDia);\par
    \}\par
\}\par
\f2\u-10179?\u-8947?\f1  \f0 Como funciona nesse exemplo:\par
O switch est\'e1 atribuindo um valor diretamente \'e0 vari\'e1vel numeroDia.\par
\par
Quando o case precisa de mais de uma instru\'e7\'e3o, usamos \{ ... \} e dentro dele colocamos yield valor.\par
\par
O yield devolve esse valor para o pr\'f3prio switch.\par
\par
Voc\'ea disse:\par
Qual dos exemplos representam o uso do elvis operator?\par
var ex = <CONDICAO> ? <VALOR_PARAATRIBUIR_SE_VERDADEIRO> : <VALOR_PARA_ATRIBUIR_SE_FALSO>\par
nenhuma das alternativas\par
var ex = <CONDICAO> : <VALOR_PARA_ATRIBUIR_SE_VERDADEIRO> ? <VALOR_PARA_ATRIBUIR_SE_FALSO>\par
var ex = if (<CONDICAO>) <VALOR_PARA_ATRIBUIR_SE_VERDADEIRO> else <VALOR_PARA_ATRIBUIR_SE_FALSO>\par
var ex = <CONDICAO> ? <VALOR_PARA_ATRIBUIR_SE_E> : <VALOR_PARA_ATRIBUIR_SE_VERDADEIRO\par
\par
O \f1\ldblquote\f0 Elvis operator\f1\rdblquote  \f0 que aparece em v\'e1rias linguagens (como Kotlin) \'e9 uma varia\'e7\'e3o do operador tern\'e1rio (?:), mas no contexto da sua pergunta, a sintaxe que voc\'ea colocou mais parece a do operador tern\'e1rio tradicional do Java.\par
\par
No Java, o formato correto \'e9:\par
var ex = <CONDICAO> ? <VALOR_SE_VERDADEIRO> : <VALOR_SE_FALSO>;\par
Ent\'e3o, entre as alternativas que voc\'ea colocou, a primeira:\par
\par
var ex = <CONDICAO> ? <VALOR_PARAATRIBUIR_SE_VERDADEIRO> : <VALOR_PARA_ATRIBUIR_SE_FALSO>\par
\'e9 a que representa corretamente o uso do operador tern\'e1rio (e \'e9 a mais pr\'f3xima do \f1\ldblquote\f0 Elvis\f1\rdblquote  \f0 no sentido de estrutura condicional inline).\par
\par
Voc\'ea disse:\par
explique o que \'e9 elvis operator\par
\par
O Elvis operator (?:) \'e9 um atalho que surgiu primeiro em linguagens como Groovy e Kotlin para lidar com valores nulos de forma simples, evitando escrever if ou operador tern\'e1rio completos.\par
\par
Ele \'e9 chamado de \f1\ldblquote\f0 Elvis\f1\rdblquote  \f0 porque o s\'edmbolo ?: lembra um rostinho com topete estilo Elvis Presley. \f2\u-10180?\u-8264?\u-10179?\u-8690?\f0\par
\par
\f2\u-10179?\u-9012?\f1  \f0 Como funciona\par
O Elvis operator retorna o valor \'e0 esquerda se ele n\'e3o for nulo, caso contr\'e1rio, retorna o valor \'e0 direita.\par
\par
\f2\u-10179?\u-9002?\f1  \f0 Sintaxe:\par
valorAtribuido = valorPossivelmenteNulo ?: valorPadrao\par
\f2\u-10179?\u-9055?\f1  \f0 Equivalente a:\par
\par
if (valorPossivelmenteNulo != null) \{\par
    valorAtribuido = valorPossivelmenteNulo\par
\} else \{\par
    valorAtribuido = valorPadrao\par
\}\par
\f2\u-10179?\u-9011?\f1  \f0 Exemplo em Kotlin\par
val nome: String? = null\par
val nomeFinal = nome ?: "Desconhecido"\par
\par
println(nomeFinal) // Sa\'edda: Desconhecido\par
nome \'e9 nulo, ent\'e3o o valor "Desconhecido" \'e9 atribu\'eddo.\par
\par
\f3\u9888?\f1  \f0 No Java\par
O Java n\'e3o tem Elvis operator nativo.\par
Para obter o mesmo efeito, voc\'ea usa o operador tern\'e1rio:\par
\par
String nome = null;\par
String nomeFinal = (nome != null) ? nome : "Desconhecido";\par
\par
Voc\'ea disse:\par
difen\'e7a de while e do while\par
\par
\par
O ChatGPT disse:\par
A diferen\'e7a entre while e do while em Java \'e9 principalmente quando a condi\'e7\'e3o \'e9 verificada.\par
\par
\f2\u-10179?\u-9012?\f1  \f0 1. while\par
Testa a condi\'e7\'e3o primeiro antes de executar o bloco.\par
\par
Se a condi\'e7\'e3o for falsa logo no in\'edcio, o bloco nunca ser\'e1 executado.\par
while (condicao) \{\par
    // c\'f3digo a repetir\par
\}\par
\f2\u-10179?\u-9011?\f1  \f0 Exemplo:\par
\par
\par
int i = 5;\par
while (i < 5) \{\par
    System.out.println("Valor de i: " + i);\par
    i++;\par
\}\par
// N\'e3o imprime nada, pois a condi\'e7\'e3o \'e9 falsa logo no come\'e7o.\par
\f2\u-10179?\u-9012?\f1  \f0 2. do while\par
Executa o bloco pelo menos uma vez antes de testar a condi\'e7\'e3o.\par
\par
A condi\'e7\'e3o \'e9 verificada no final.\par
\par
Estrutura:\par
\par
do \{\par
    // c\'f3digo a repetir\par
\} while (condicao);\par
\f2\u-10179?\u-9011?\f1  \f0 Exemplo:\par
\par
int i = 5;\par
do \{\par
    System.out.println("Valor de i: " + i);\par
    i++;\par
\} while (i < 5);\par
// Imprime uma vez mesmo com a condi\'e7\'e3o falsa no in\'edcio.\par
\f2\u-10179?\u-8947?\f1  \f0 Resumindo\par
Caracter\'edstica\tab while\tab do while\par
Verifica\'e7\'e3o da condi\'e7\'e3o\tab Antes de executar\tab Depois de executar\par
Execu\'e7\'e3o m\'ednima garantida\tab N\'e3o\tab Sim, pelo menos 1 vez\par
Uso comum\tab Quando n\'e3o sabe se deve executar\tab Quando precisa executar pelo menos 1 vez\par
\par
Se quiser, posso te montar um fluxograma visual mostrando passo a passo o que acontece no while e no do while para ficar ainda mais claro. Quer que eu fa\'e7a?\par
\par
\par
\par
\par
\par
\par
\par
\par
Voc\'ea disse:\par
Quando usamos o case no formato mais antigo (case: ) e n\'e3o usamos o break em cada condi\'e7\'e3o o que acontece ?\par
O c\'f3digo entra em loop infinito\par
Um erro \'e9 gerado\par
Quando o c\'f3digo termina o primeiro case ao inv\'e9s dele sair da estrutura switch, ele ira rodar todos os cases abaixo desse\par
O c\'f3digo ir\'e1 rodar normalmente e sair do switch assim que concluir o case\par
O c\'f3digo n\'e3o funciona, porque a declara\'e7\'e3o do case \'e9 obrigat\'f3ria\par
\par
\par
O ChatGPT disse:\par
A alternativa correta \'e9:\par
\par
\f3\u9989?\f1  \f0 "Quando o c\'f3digo termina o primeiro case ao inv\'e9s dele sair da estrutura switch, ele ir\'e1 rodar todos os cases abaixo desse"\par
\par
\f2\u-10179?\u-9012?\f1  \f0 Isso acontece porque no formato antigo do switch (antes das switch expressions), se voc\'ea n\'e3o coloca break no final de um case, o Java "cai" para os pr\'f3ximos cases \f1\emdash  esse comportamento \f0\'e9 chamado de fall-through.\par
\par
Exemplo:\par
int opcao = 2;\par
\par
switch (opcao) \{\par
    case 1:\par
        System.out.println("Op\'e7\'e3o 1");\par
    case 2:\par
        System.out.println("Op\'e7\'e3o 2");\par
    case 3:\par
        System.out.println("Op\'e7\'e3o 3");\par
    default:\par
        System.out.println("Op\'e7\'e3o inv\'e1lida");\par
\}\par
\f2\u-10179?\u-9055?\f1  \f0 Sa\'edda:\par
\par
Op\'e7\'e3o 2\par
Op\'e7\'e3o 3\par
Op\'e7\'e3o inv\'e1lida\par
O switch entrou no case 2, mas como n\'e3o havia break, executou tamb\'e9m o case 3 e o default.\par
\par
Se quiser, posso tamb\'e9m te mostrar como evitar esse comportamento usando break ou usando o novo formato do switch que j\'e1 n\'e3o precisa disso. Quer que eu mostre?\par
\par
\par
\par
\par
\par
\par
\par
\par
Voc\'ea disse:\par
Qual a fun\'e7\'e3o da keywork continue?\par
Continua a execu\'e7\'e3o de um c\'f3digo de um determinado ponto que foi interrompido por um erro\par
Quando usado no case no formato mais antigo do Java \'e9 para sair do switch sem entrar nos cases abaixo e em uma estrutura de repeti\'e7\'e3o para sair da mesma\par
Continuar a execu\'e7\'e3o de um loop indo para a pr\'f3xima itera\'e7\'e3o e ignorando o c\'f3digo abaixo do mesmo.\par
Nenhuma das alternativas\par
Informa onde a execu\'e7\'e3o de um c\'f3digo continua ap\'f3s anteriormente ser chamado um \par
\par
\par
O ChatGPT disse:\par
A resposta correta \'e9:\par
\par
\f3\u9989?\f1  \f0 "Continuar a execu\'e7\'e3o de um loop indo para a pr\'f3xima itera\'e7\'e3o e ignorando o c\'f3digo abaixo do mesmo."\par
\par
\f2\u-10179?\u-9012?\f1  \f0 continue em Java \'e9 usado dentro de la\'e7os de repeti\'e7\'e3o (for, while, do while).\par
Quando o continue \'e9 executado:\par
\par
Ele pula todo o c\'f3digo que est\'e1 abaixo dele na itera\'e7\'e3o atual.\par
\par
Vai direto para verificar a condi\'e7\'e3o do loop e iniciar a pr\'f3xima itera\'e7\'e3o.\par
\par
Exemplo:\par
for (int i = 1; i <= 5; i++) \{\par
    if (i == 3) \{\par
        continue; // pula o resto do c\'f3digo quando i == 3\par
    \}\par
    System.out.println(i);\par
\}\par
\f2\u-10179?\u-9055?\f1  \f0 Sa\'edda:\par
1\par
2\par
4\par
5\par
O n\'famero 3 n\'e3o foi impresso porque o continue fez o loop ir direto para a pr\'f3xima volta.\par
\par
\par
\ul\i explique novamente o elvis operator e dando um exemplo em java simples passo a passo\par
\ulnone O ChatGPT disse:\par
O Elvis operator (?:) \'e9 um atalho para verificar se um valor \'e9 nulo e, se for, usar um valor padr\'e3o.\par
No Java ele n\'e3o existe como operador nativo, mas podemos simular o mesmo comportamento usando o operador tern\'e1rio.\par
\par
\f2\u-10179?\u-9011?\f1  \f0 Passo a passo com exemplo simples\par
\f4 1\u-497?\f3\u8419?\f0  Situa\'e7\'e3o:\par
Temos uma vari\'e1vel que pode vir nula:\par
\par
String nome = null;\par
\f4 2\u-497?\f3\u8419?\f0  Queremos:\par
Se nome n\'e3o for null, usamos ele.\par
Se for null, usamos "Desconhecido".\par
\par
\f4 3\u-497?\f3\u8419?\f0  Em linguagens com Elvis operator (ex.: Kotlin):\par
val resultado = nome ?: "Desconhecido"\par
\f4 4\u-497?\f3\u8419?\f0  Em Java, usando tern\'e1rio (equivalente):\par
String resultado = (nome != null) ? nome : "Desconhecido";\par
\f4 5\u-497?\f3\u8419?\f0  O que acontece no c\'f3digo:\par
(nome != null) \f5\u8594?\f1  \f0 false, pois nome \'e9 null.\par
\par
Como \'e9 false, o valor depois dos : \'e9 escolhido \f5\u8594?\f1  \f0 "Desconhecido".\par
\par
resultado recebe "Desconhecido".\par
\par
\f4 6\u-497?\f3\u8419?\f0  C\'f3digo completo:\par
public class TesteElvis \{\par
    public static void main(String[] args) \{\par
        String nome = null;\par
\par
        // Simulando Elvis com operador tern\'e1rio\par
        String resultado = (nome != null) ? nome : "Desconhecido";\par
\par
        System.out.println(resultado); // Sa\'edda: Desconhecido\par
    \}\par
\}\par
\par
\par
Voc\'ea disse:\par
como assim nulo? e quando usar o elvis\par
\par
\par
\f2\u-10179?\u-9012?\f1  \f0 O que significa nulo (null) em Java\par
Em Java, null significa aus\'eancia de valor em uma vari\'e1vel de refer\'eancia.\par
\par
Ou seja, a vari\'e1vel existe, mas n\'e3o aponta para nenhum objeto.\par
\par
Exemplo:\par
\par
String nome = null; // n\'e3o aponta para nenhum texto\par
String outroNome = "Mel"; // aponta para um texto\par
Se voc\'ea tentar usar nome.length() quando nome \'e9 null, vai dar erro (NullPointerException).\par
\par
\f2\u-10179?\u-9012?\f1  \f0 Quando usar o Elvis operator (ou seu equivalente em Java)\par
Voc\'ea usa quando quer evitar verificar nulos manualmente e definir um valor padr\'e3o caso a vari\'e1vel seja nula.\par
\par
Exemplo pr\'e1tico:\par
Imagina que voc\'ea tem uma vari\'e1vel que pode ou n\'e3o ter valor:\par
\par
String apelido = null; // pode ter valor ou ser nulo\par
Voc\'ea quer garantir que a vari\'e1vel sempre tenha algo para mostrar:\par
String nomeParaMostrar = (apelido != null) ? apelido : "Sem apelido";\par
System.out.println(nomeParaMostrar); // Sa\'edda: Sem apelido\par
Se apelido tivesse algum valor, como "Melzinha", ele seria usado.\par
Se for null, o "Sem apelido" \'e9 usado.\par
\par
\f2\u-10179?\u-9055?\f1  \f0 Resumo:\par
\par
null = aus\'eancia de valor.\par
\par
Elvis operator (ou tern\'e1rio em Java) = atalho para \f1\ldblquote\f0 se for nulo, use outro valor\f1\rdblquote\f0 .\i0\lang22\par
}
 